apiVersion: "redisoperator.k8s.io/v1alpha1"
kind: RedisCluster
metadata:
  name: {{ .Release.Name }}
  labels:
    app: {{ template "fullname" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
spec:
  numberOfMaster: {{ .Values.replicas.variables.numberOfMaster.value }}
  replicationFactor: {{ .Values.replicas.variables.replicationFactor.value }}
  serviceName: {{ .Release.Name }}-cluster
{{- if .Values.persistence.enabled }}
  storage:
    useExternalDisk: true
    DataDiskSize: {{ .Values.persistence.variables.size.value }}Gi
    storageClass: {{ .Values.persistence.variables.storagePool.value }}
{{- end }}
  podTemplate:
    metadata:
      labels:
        app: {{ template "fullname" . }}
        chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
        release: "{{ .Release.Name }}"
        heritage: "{{ .Release.Service }}"
    spec:
      serviceAccountName: "{{ .Release.Name }}"
      containers:
        - name: redis-node
          image: "{{ .Values.image.variables.image.value }}"
          args: ["--v=2", 
            "--logtostderr=true", 
            "--alsologtostderr=true",
            "--rs={{ template "service-name" . }}", 
            "--t=10s", 
            "--d=10s", 
            "--ns=$(POD_NAMESPACE)",
{{- if .Values.resources }}
             "--max-memory=$(MEMORY_REQUEST)",
{{- end }}
{{- if .Values.persistence.enabled }}
            "--persistent-data=true",
{{- end }}
            "--cluster-node-timeout=2000"]
          imagePullPolicy: {{ default "" .Values.image.variables.policyType.value | quote }}
          ports:
              - containerPort: 6379
                name:  redis
              - containerPort: 16379
                name: cluster
          env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
{{- if .Values.resources }}
            - name: MEMORY_REQUEST
              valueFrom:
                resourceFieldRef:
                  containerName: redis-node
                  resource: requests.memory
{{- end }}
          livenessProbe:
            httpGet:
              path: /live
              port: 8080
            initialDelaySeconds: 12
            timeoutSeconds: 5
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 30
          readinessProbe:
            httpGet:
              path: /ready
              port: 8080
            initialDelaySeconds: 12
            timeoutSeconds: 5
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          resources:
            requests:
              cpu: {{ .Values.resources.variables.cpuRequest.value }}m
              memory: {{ .Values.resources.variables.memoryRequest.value }}Mi
